plugins {
  id 'base'
  id 'maven-publish'
}

repositories {
  jcenter()
}


def gemVersionTheme = '0.0.1'
def gemVersionPlugin = '0.0.1'
def mavenVersionTheme = "${gemVersionTheme}"
def mavenVersionPlugin = "${gemVersionPlugin}"
def gemNameTheme = "unidata-jekyll-theme-${gemVersionTheme}.gem"
def gemNamePlugin = "unidata-jekyll-plugins-${gemVersionPlugin}.gem"

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.ALL
  // when upgrading, make sure we are using a compatible version of spock-core for testing.
  gradleVersion = '6.7.1'
}

ext {
  NEXUS_USERNAME_KEY = 'nexus.username'
  NEXUS_PASSWORD_KEY = 'nexus.password'
}

String getPropertyOrFailBuild(String key) {
  if (!hasProperty(key)) {
    throw new GradleException("You must define the '$key' property.")
  } else {
    property(key) as String
  }
}

def gemFileTheme = file("${gemNameTheme}")

def gemArtifactTheme = artifacts.add('archives', gemFileTheme) {
  type 'gem'
  extension 'gem'
}

def gemFilePlugin = file("${gemNamePlugin}")

def gemArtifactPlugin = artifacts.add('archives', gemFilePlugin) {
  type 'gem'
  extension 'gem'
}

publishing {
  repositories {
    if (mavenVersionTheme.endsWith('SNAPSHOT')) {
      maven {
        name = 'snapshots'
        url = 'https://artifacts.unidata.ucar.edu/repository/unidata-snapshots/'
      }
    } else {
      maven {
        name = 'releases'
        url = 'https://artifacts.unidata.ucar.edu/repository/unidata-releases/'
      }
    }
  }

  publications {
    themeGem(MavenPublication) {
      groupId = 'rubygems'
      artifactId = 'unidata-jekyll-theme'
      version = "${mavenVersionTheme}"

      artifact gemArtifactTheme
    }
    pluginGem(MavenPublication) {
      groupId = 'rubygems'
      artifactId = 'unidata-jekyll-plugins'
      version = "${mavenVersionPlugin}"

      artifact gemArtifactPlugin
    }
  }
}

// The "publish" tasks require credentials for our Nexus server, which they look for in Gradle properties.
// If those properties (i.e. NEXUS_USERNAME_KEY and NEXUS_PASSWORD_KEY) haven't been provided, the build will fail.
// Therefore, we only want to configure credentials when a "publish" task is part of the execution plan. Otherwise,
// unavailable credentials could cause a build to fail even if we aren't doing any publishing. The TaskExecutionGraph
// allows us to do that.
gradle.taskGraph.whenReady {TaskExecutionGraph taskGraph ->
  // This won't find any publishToMavenLocal tasks. Those are of type PublishToMavenLocal
  Collection<Task> mavenPublishTasks = taskGraph.allTasks.findAll {
    it instanceof PublishToMavenRepository
  }

  mavenPublishTasks.each {
    it.repository.credentials.with {
      username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
      password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    }
  }
}
